---
functional:
  - Пользователь может зарегистрироваться через email, логин и пароль или OAuth (Github/Discord)
  - При регистрации через OAuth, если email не указан в аккаунте, система запрашивает его вручную (fallback)
  - Если email уже занят, система показывает сообщение "Email is already taken. Sign in/Forgot your password?"
  - Пользователь может войти в аккаунт через email или OAuth
  - Пользователь может выйти из аккаунта (Logout)
  - В форме входа есть кнопка "Forgot your password?", при нажатии на которую система отправляет письмо со ссылкой на сброс пароля
  - Пользователь должен иметь возможность просматривать свой профиль и редактировать информацию о себе
  - Пользователь должен иметь возможность просматривать чужие соревнования
  - Должна быть возможность создания новой игры и подключение к уже существующей
  - Пользователь должен иметь возможность писать свой код и видеть код соперника в режиме он-лайн
  - Пользователь должен иметь возможность отслеживать таймер
  - Пользователь должен иметь возможность отслеживать рейтинг игр
  - При создании игры с рандомным игроком лобби должно высвечиваться как "доступное к присоединению" и любой игрок может подключиться к нему
  - Пользователь должен иметь возможность выбора режима игры (по ссылке, с рандомным человеком, с ботом, турниры)
  - Пользователь должен иметь возможность выбора уровня сложности (легкий/средний/сложный)
  - Пользователь должен иметь возможность создавать турнир и управлять им
  - Должна быть возможность поддержки разных языков программирования (Python, JS и др.)
  - Проверка возможности автодополнения и синтаксической подсветки
  - Проверка обработки некорректного кода
  - Система должна позволять проводить проверки кода неограниченное количество раз
  - Проверка корректности интерпретации и выполнения кода
  - Пользователь должен иметь возможность отправлять и читать сообщения в чате
  - Пользователь должен иметь возможность менять язык задания
  - Настройка светлой/темной темы должна работать корректно
  - Если игрок отправляет код с ошибкой, система должна сохранять его попытку (чтобы можно было посмотреть историю)
  - При выборе языка интерфейс (задание, ошибки) должен переключаться на его синтаксис
  - Должна быть возможность репорта решения соперника
  - При вылете из игры игрок должен иметь возможность переподключиться в ту же игру, а его соперник при этом может продолжать игру
  - Игра может продолжаться неограниченное количество времени
  - Система должна выводить на экран модальное окно с победителем и воспроизводить соответствующий звук при победе одного из игроков
  - Победитель-игрок может выйти из игры по нажатию кнопки "exit", которая у него появилась. Кнопка "check" у него более неактивна, но он может остаться и посмотреть ещё раз на свой код
  - При победе одного из игроков его соперник может выйти из игры либо продолжить писать код
  - При выходе обоих игроков игра удаляется из памяти и не отображается в активных
non-functional:
  - Сайт должен быть разработан с учетом удобства использования и оптимизирован для скорости работы
  - Сайт должен быть безопасным и защищать данные пользователя
  - Сайт должен иметь мобильную версию
  - Сайт должен быть протестирован на совместимость с последними версиями браузеров
  - Сайт должен быть способен обрабатывать большое количество трафика (например, 1000 одновременных пользователей)
  - Сайт должен быть доступен на различных устройствах
  - Должны присутствовать лоадеры при действиях (отправка кода, подбор соперника)
  - Подтверждение при выходе из игры (чтобы случайный клик не сбрасывал прогресс)
implicit:
  - Страницы должны загружаться не дольше 2–3 секунд (включая мобильные устройства)
  - При высокой нагрузке вместо ошибки 500/503 должна отображаться «очередь» или другое дружелюбное сообщение
  - Все формы должны быть защищены от SQL-инъекций и XSS-атак
  - На разных разрешениях (от 320px до 4K) не должно быть горизонтального скролла
  - Пользователя не должно "выкидывать" из аккаунта при переходе между страницами
  - Сайт должен иметь подробные и чёткие сообщения об ошибках
  - Сайт должен иметь логирование действий
  - Действия (отправка кода, старт игры) должны выполняться без заметных лагов
  - Если задача требует вычислений, система должна обрабатывать их за разумное время (зависящее от сложности)
  - Элементы управления (кнопки, поля ввода) должны быть интуитивно понятными
  - Если игрок долго бездействует, система должна напоминать о ходе (например, через уведомление)
  - В соревновательном режиме с другим игроком не должно быть дисбаланса из-за разных скоростей интернета у игроков
  - Задачи должны быть сбалансированы по сложности (новички не должны получать задачи уровня hard)
  - Если игрок сдаётся или дисконнектится, противник должен получить уведомление и победу
  - Выбранное время на решение должно отображаться корректно
  - Система должна корректно работать при нестабильном интернете (автореконнект, сохранение прогресса)
  - Если игрок закрыл вкладку и вернулся, игра должна восстановиться
  - При падении сервера пользователь должен получить понятное сообщение, а не "бесконечную загрузку"
  - Если код игрока содержит бесконечный цикл, система должна его остановить через таймаут (3-5 сек)
  - Сообщения в чате должны обновляться без перезагрузки страницы
  - Игрок не может отправлять 10+ сообщений подряд (должен быть rate limit)
  - Рейтинг должен обновляться мгновенно, а не 5-10 минут
  - При перезагрузке страницы игрок должен вернуться в текущий матч, а не в лобби
  - Если игрок закрыл вкладку, система должна хранить его прогресс 5-10 мин (на случай возврата)
  - Если игрок сдаётся, система должна спрашивать подтверждение
  - В чате должен быть фильтр мата (или возможность репорта)
  - В чате должно быть уведомление, если соперник печатает сообщение
