---
- summary: |
    Проверка успешной регистрации нового пользователя
  requirement: |
    При вводе валидной почты, никнейма и пароля пользователь должен зарегистрироваться в системе
  prerequisites: |
    - Открыта главная страница сайта (https://codebattle.hexlet.io)
    - Пользователь не авторизован
  test-data: |
    Nickname = testuser2, email = testuser@example.com, password = admin123.
  steps:
    1. Открыть страницу регистрации
    2. Ввести тестовые данные в поля Nickname, Email, Password, Password Confirmation
    3. Нажать кнопку Submit
  expected-result: |
    Пользователь зарегистрирован и перенаправлен на главную страницу сайта

- summary: |
    Проверка неуспешной регистрации с некорректным email
  requirement: |
    При вводе некорректной почты пользователь не должен зарегистрироваться
  prerequisites:
    - Открыта страница регистрации
    - Пользователь не авторизован
  test-data: |
    Nickname = testuser3, email = testuser@example, password = admin123.
  steps:
    1. Ввести некорректный email
    2. Ввести валидный пароль
    3. Нажать кнопку Submit
  expected-result: |
    Регистрация не проходит, появляется сообщение "Invalid email"

- summary: |
    Проверка успешного входа через через OAuth-интеграцию с Github
  requirement: |
    Пользователь с аккаунтом GitHub должен иметь возможность войти в систему через OAuth без ввода логина и пароля на Codebattle
  prerequisites:
    - Открыта страница регистрации
    - GitHub-аккаунт пользователя существует и не привязан к другому профилю Codebattle
    - Пользователь не авторизован
  test-data: |
    Нет
  steps:
    1. Нажать на кнопку "Sign up with Github"
    2. Перенаправление на страницу авторизации GitHub
    3. Вводим логин и пароль от Github
    4. Подтверждаем разрешения для Codebattle
  expected-result: |
    - Пользователь успешно авторизован в Codebattle
    - Перенаправление на главную страницу или в профиль
    - В профиле отображается привязанный GitHub-аккаунт

- summary: |
    Проверка успешного входа через через OAuth-интеграцию с Discord
  requirement: |
    Пользователь с аккаунтом Discord должен иметь возможность войти в систему через OAuth без ввода логина и пароля на Codebattle
  prerequisites:
    - Открыта страница регистрации
    - Discord-аккаунт пользователя существует и не привязан к другому профилю Codebattle
    - Пользователь не авторизован
  test-data: |
    Нет
  steps:
    1. Нажать на кнопку "Sign up with Discord"
    2. Перенаправление на страницу авторизации Discord
    3. Вводим логин и пароль от Discord
    4. Подтверждаем разрешения для Codebattle
  expected-result: |
    - Пользователь успешно авторизован в Codebattle
    - Перенаправление на главную страницу или в профиль
    - В профиле отображается привязанный Discord-аккаунт

- summary: |
    Проверка успешного входа в существующий аккаунт
  requirement: |
    При вводе валидных данных в форме входа пользователь должен войти в свой аккаунт
  prerequisites:
    - Открыта главная страница сайта
    - Пользователь не авторизован
  test-data: |
    Email = testuser@example.com, Password = admin123.
  steps:
    1. Ввести email и пароль
    2. Нажать кнопку Submit
  expected-result: |
    Пользователь авторизован и перенаправлен на главную страницу

- summary: |
    Проверка возможности участия в гостевом режиме без авторизации
  requirement: |
    Система должна предоставлять возможность участия в пробном сражении без регистрации и авторизации
  prerequisites:
    - Открыта главная страница сайта
    - Пользователь не авторизован
  test-data: |
    Нет
  steps:
    1. Нажать на кнопку "Try simple battle"
    2. Дождаться загрузки игровой сессии
    3. В левой панели редактора кода ввести любой текст
    4. Нажать кнопку "Run"
  expected-result: |
    Пользователь перенаправлен на страницу с игрой, поле для ввода кода доступно для редактирования

- summary: |
    Проверка создания кастомной игры с пользовательскими настройками
  requirement: |
    Авторизованный пользователь должен иметь возможность создать игру с указанием уровня сложности, типа игры, контроля времени, конкретной задачи, тегов
  prerequisites:
    - Открыта главная страница сайта
    - Пользователь авторизован
  test-data: |
    - Level = easy
    - Game type = With a bot
    - Time control = 8 min
    - Task = pizza_volume
    - Tags = math
  steps:
    1. Нажать на кнопку "Create a game"
    2. Выставить фильтры в соответствии с тестовыми данными
    3. Нажать кнопку "Create battle"
    4. Дождаться загрузки игровой сессии
  expected-result: |
    Происходит перенаправление на страницу с новой игрой, игра соответствует выбранным фильтрам, противником выступает бот

- summary: |
    Проверка создания игры с приглашением другого пользователя и совместным участия
  requirement: |
    Система должна позволять создавать игру, отправлять уведомление приглашённому пользователю и обеспечивать совместный доступ к игровой сессии
  prerequisites:
    Пользователь 1:
    - Открыта главная страница сайта
    - Авторизован через GitHub
    Пользователь 2:
    - Не авторизован
    - Открыта главная страница сайта
    - Имеет валидный аккаунт (testuser@example.com/admin123.)
  test-data: |
    - Level = elementary
    - Game type = With a friend
    - Time control = 8 min
    - Task = rect_area
    - Tags = math
  steps:
    1. [Пользователь 2] Авторизоваться через email и password:
        - Ввести testuser@example.com в поле email
        - Ввести admin123. в поле Password
        - Нажать кнопку Submit
    2. [Пользователь 2] Создать игру:
        - Нажать на кнопку "Create a game"
        - Установить параметры из test-data
        - Нажать на кнопку "Create battle"
    3. [Пользователь 1] Проверить уведомление:
        - Убедиться в появлении badge-уведомления (+1)
        - Нажать на иконку уведомлений
    4. [Пользователь 1] Принять приглашение:
        - В списке выбрать приглашение от Пользователя 2
        - Нажать кнопку "Accept"
    5. Дождаться синхронизации и загрузки игровой сессии у обоих пользователей
  expected-result: |
    - Открывается один и тот же game session ID
    - Таймер показывает 8:00
    - Загружена задача "rect_area"
    - Доступен чат
    - Уведомление помечается как прочитанное

- summary: |
    Проверка полного цикла успешного создания турнира и участия в нём
  requirement: |
    Система должна предоставлять возможность:
        - Создавать турниры с настройками по умолчанию
        - Присоединяться к созданному турниру
        - Запускать турнир после формирования лобби
        - Обеспечивать игровой процесс
  prerequisites:
    - Открыта главная страница сайта
    - Пользователь авторизован
  test-data: |
    Настройки по умолчанию
  steps:
    1. Перейти во вкладку "Tournaments"
    2. Нажать на текстовую ссылку "You may want to create one"
    3. В блоке "Create a new tournament":
       - Проверить автоматически сгенерированное название
       - Оставить настройки по умолчанию
       - Нажать кнопку "Create"
    4. В лобби турнира:
       - Нажать "Join" для участия
       - Нажать "Start", когда появится возможность
       - Подтвердить запуск в диалоговом окне ("Confirm")
    5. В окне ожидания:
       - Проверить отсчёт таймера
       - Нажать "Open" или дождаться автоматического старта
    6. Дождаться загрузки игровой сессии
  expected-result: |
    - Чат лобби доступен для сообщений
    - Таймер обратного отсчёта работает корректно
    - Открывается игровой интерфейс
    - Доступны все функциональные элементы (редактор кода, кнопка отправки решений)
